import logging
from dataclasses import dataclass
from homeassistant.components.number import NumberEntityDescription
from homeassistant.components.select import SelectEntityDescription
from homeassistant.components.button import ButtonEntityDescription
from pymodbus.payload import BinaryPayloadBuilder, BinaryPayloadDecoder, Endian
from custom_components.msb_technology.const import *
from time import time

_LOGGER = logging.getLogger(__name__)


PRM            = 0x0001 # Define the inverter as single or primary when using in 3-phase operation
SCN            = 0x0002 # Define the inverter as single or primary when using in 3-phase operation
ALL_PRM_GROUP  = PRM | SCN

LI            = 0x0010 # Define the inverter LI Battery Usage (this will change % to V)
AGM           = 0x0020 # Define the inverter AGM/FLOOD/NON-BMS Battery Usage (this will change V to %)
ALL_SCN_GROUP  = LI | AGM

RS485            = 0x0100 # Define the RS485 protocol (L01) usage - different registers and dadatypes than CAN
CANGR            = 0x0200 # Define the CAN Growatt protocol (L51) usage - different registers and datatypes and RS485
ALL_PRT_GROUP  = RS485 | CANGR

ALLDEFAULT = 0

# ======================= end of bitmask handling code =============================================

SENSOR_TYPES = []


# =================================================================================================

@dataclass
class Hf6000sxModbusButtonEntityDescription(BaseModbusButtonEntityDescription):
    allowedtypes: int = ALLDEFAULT # maybe 0x0000 (nothing) is a better default choice

@dataclass
class Hf6000sxModbusNumberEntityDescription(BaseModbusNumberEntityDescription):
    allowedtypes: int = ALLDEFAULT # maybe 0x0000 (nothing) is a better default choice

@dataclass
class Hf6000sxModbusSelectEntityDescription(BaseModbusSelectEntityDescription):
    allowedtypes: int = ALLDEFAULT # maybe 0x0000 (nothing) is a better default choice

@dataclass
class Hf6000sxModbusSensorEntityDescription(BaseModbusSensorEntityDescription):
    """A class that describes Hf6000sx Modbus sensor entities."""
    allowedtypes: int = ALLDEFAULT # maybe 0x0000 (nothing) is a better default choice
    order16: int = Endian.Big
    order32: int = Endian.Big
    unit: int = REGISTER_U16
    register_type: int= REG_HOLDING

# ====================================== Computed value functions  =================================================

def value_function_timingmode(initval, descr, datadict):
    return  [ ('timed_charge_start_h', datadict.get('timed_charge_start_h', 0), ),
              ('timed_charge_start_m', datadict.get('timed_charge_start_m', 0), ),
              ('timed_charge_end_h', datadict.get('timed_charge_end_h', 0), ),
              ('timed_charge_end_m', datadict.get('timed_charge_end_m', 0), ),
              ('timed_discharge_start_h', datadict.get('timed_discharge_start_h', 0), ),
              ('timed_discharge_start_m', datadict.get('timed_discharge_start_m', 0), ),
              ('timed_discharge_end_h', datadict.get('timed_discharge_end_h', 0), ),
              ('timed_discharge_end_m', datadict.get('timed_discharge_end_m', 0), ),
            ]

def value_function_today_solar_energy(initval, descr, datadict):
    return  datadict.get('today_pv1_solar_energy', 0) + datadict.get('today_pv2_solar_energy',0) + datadict.get('today_pv3_solar_energy',0) + datadict.get('today_pv4_solar_energy',0)


# ================================= Button Declarations ============================================================

BUTTON_TYPES = [

    Hf6000sxModbusButtonEntityDescription(
        name = "AC-OUT Turn ON",
        key = "ac_out_on",
        register = 0,
        command = 0,
        icon = "mdi:power-plug-outline",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "AC-OUT Turn OFF",
        key = "ac_out_off",
        register = 0,
        command = 256,
        icon = "mdi:power-plug-off-outline",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "Buzzer Alarm ON",
        key = "buzzer_alarm_on",
        register = 22,
        command = 1,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "Buzzer Alarm OFF",
        key = "buzzer_alarm_off",
        register = 22,
        command = 0,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "System Alarm ON",
        key = "system_alarm_on",
        register = 107,
        command = 1,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "System Alarm OFF",
        key = "system_alarm_off",
        register = 107,
        command = 0,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusButtonEntityDescription( 
        name = "RTC Synchronisation",
        key = "sync_rtc",
        register = 45,
        write_method = WRITE_MULTI_MODBUS,
        icon = "mdi:home-clock",
        value_function = value_function_sync_rtc_ymd_fullyear,
    ),
    Hf6000sxModbusButtonEntityDescription( 
        name = "Reset USER Info",
        key = "reset_user_info",
        register = 32,
        command = 1,
        icon = "mdi:restart",
        entity_registry_enabled_default = False,
    ),
    Hf6000sxModbusButtonEntityDescription( 
        name = "Reset to FACTORY",
        key = "reset_factory",
        register = 33,
        command = 1,
        icon = "mdi:restart",
        entity_registry_enabled_default = False,
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "Backlight ON",
        key = "backlight_on",
        register = 104,
        command = 1,
        icon = "mdi:lightbulb-on-outline",
    ),
    Hf6000sxModbusButtonEntityDescription(
        name = "Backlight OFF",
        key = "backlight_off",
        register = 104,
        command = 0,
        icon = "mdi:lightbulb-outline",
    ),

]

# ================================= Number Declarations ============================================================

NUMBER_TYPES = [
    ###
    #
    # Data only number types
    #
    ###

    ###
    #
    #  Normal number types
    #
    ###

    Hf6000sxModbusNumberEntityDescription(
        name = "Max Battery Charge Current",
        key = "battery_max_charge_current",
        register = 34,
        fmt = "i",
        native_min_value = 0,
        native_max_value = 120,
        native_step = 1,
        scale = 1,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = NumberDeviceClass.CURRENT,
        icon = "mdi:current-dc",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Bulk Charge Voltage",
        key = "bulk_charge_voltage",
        register = 35,
        fmt = "f",
        native_min_value = 50,
        native_max_value = 64,
        native_step = 0.1,
        scale = 0.1,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = NumberDeviceClass.VOLTAGE,
        allowedtypes = PRM,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Float Charge Voltage",
        key = "float_charge_voltage",
        register = 36,
        fmt = "f",
        native_min_value = 50,
        native_max_value = 56,
        native_step = 0.1,
        scale = 0.1,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = NumberDeviceClass.VOLTAGE,
        allowedtypes = PRM,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery Voltage to Utility",
        key = "battery_volper_utility",
        register = 37,
        fmt = "f",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = NumberDeviceClass.VOLTAGE,
        native_min_value = 20,
        native_max_value = 64,
        native_step = 0.1,
        scale = 0.1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery Percent to Utility",
        key = "battery_volper_utility",
        register = 37,
        fmt = "f",
        native_unit_of_measurement = PERCENTAGE,
        native_min_value = 5,
        native_max_value = 100,
        native_step = 1,
        scale = 0.1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Max AC Charge Current",
        key = "ac_max_charge_current",
        register = 38,
        fmt = "i",
        native_min_value = 0,
        native_max_value = 80,
        native_step = 1,
        scale = 1,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = NumberDeviceClass.CURRENT,
        icon = "mdi:current-dc",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery CUTOFF Voltage",
        key = "battery_cutoff_volper",
        register = 82,
        fmt = "f",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = NumberDeviceClass.VOLTAGE,
        native_min_value = 20,
        native_max_value = 64,
        native_step = 0.1,
        scale = 0.1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery CUTOFF Percent",
        key = "battery_cutoff_volper",
        register = 82,
        fmt = "f",
        native_unit_of_measurement = PERCENTAGE,
        native_min_value = 5,
        native_max_value = 100,
        native_step = 1,
        scale = 0.1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery Recovery Voltage",
        key = "battery_recovery_volper",
        register = 95,
        fmt = "f",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = NumberDeviceClass.VOLTAGE,
        native_min_value = 20,
        native_max_value = 64,
        native_step = 0.1,
        scale = 0.1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusNumberEntityDescription(
        name = "Battery Recovery Percent",
        key = "battery_recovery_volper",
        register = 95,
        fmt = "f",
        native_unit_of_measurement = PERCENTAGE,
        native_min_value = 5,
        native_max_value = 100,
        native_step = 1,
        scale = 0.1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
        entity_category = EntityCategory.CONFIG,
    ),



]

# ================================= Select Declarations ============================================================

SELECT_TYPES = [

    Hf6000sxModbusSelectEntityDescription(
        name = "Battery Type Select",
        key = "battery_type",
        register = 39,
        option_dict = { 0: "AGM",
                        1: "Lead Acid",
                        2: "User Defined VAR.1",
                        3: "Lithium",
                        4: "User Defined VAR.2", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "Battery Protocol Select",
        key = "battery_protocol",
        register = 106,
        option_dict = { 0: "BMS Disabled",
                        1: "L01 - Growatt RS485",
                        2: "L02 - Pylontech RS485",
                        4: "L04 - Extented RS485",
                        51: "L51 - Growatt CAN",
                        52: "L52 - Pylontech CAN", },
        allowedtypes = PRM | LI,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "AC Input Mode Select",
        key = "ac_input_mode",
        register = 8,
        option_dict = { 0: "APL - 90-280 VAC",
                        1: "UPS - 170-280 VAC", 
                        2: "GEN - Generator", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "AC Output Priority Select",
        key = "ac_output_priority",
        register = 1,
        option_dict = { 0: "SBU - Solar/Battery/Utility",
                        1: "SOL - Solar First",
                        2: "UTI - Utility First",
                        3: "SUB - Solar/Utility/Battery", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "Charge Source Priority Select",
        key = "charge_source_priority",
        register = 2,
        option_dict = { 0: "Solar First",
                        1: "Solar and Utility",
                        2: "Solar Only", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "AC Output Voltage Select",
        key = "ac_output_voltage",
        register = 18,
        option_dict = { 0: "208 VAC",
                        1: "230 VAC",
                        2: "240 VAC",
                        3: "220 VAC", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "AC Output Frequency Select",
        key = "ac_output_frequency",
        register = 19,
        option_dict = { 0: "50 Hz",
                        1: "60 Hz", },
        allowedtypes = PRM,
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "Overload Restart Select",
        key = "overload_restart",
        register = 20,
        option_dict = { 0: "Yes",
                        1: "No",
                        2: "Switch to UTI", },
        entity_category = EntityCategory.CONFIG,
    ),
    Hf6000sxModbusSelectEntityDescription(
        name = "Overtemperature Restart",
        key = "overtemperature_restart",
        register = 21,
        option_dict = { 0: "Yes",
                        1: "No", },
        entity_category = EntityCategory.CONFIG,
    ),

]

# ================================= Sennsor Declarations ============================================================

SENSOR_TYPES: list[Hf6000sxModbusSensorEntityDescription] = [
    Hf6000sxModbusSensorEntityDescription(
        name = "Firmware Version",
        key = "firmware_version",
        register = 9,
        unit = REGISTER_STR,
        wordcount=3,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:information",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Firmware Control Version",
        key = "firmware_control_version",
        register = 12,
        unit = REGISTER_STR,
        wordcount=3,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:information",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Serial Number",
        key = "serial_number",
        register = 23,
        unit = REGISTER_STR,
        wordcount=5,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:information",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Device RTC Clock",
        key = "device_rtc_clock",
        register = 45,
        unit = REGISTER_WORDS,
        wordcount = 6,
        scale = value_function_rtc_ymd_fullyear,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:clock",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Type",
        key = "battery_type",
        register = 39,
        scale = { 0: "AGM",
                  1: "Lead Acid",
                  2: "User Defined VAR.1",
                  3: "Lithium",
                  4: "User Defined VAR.2", },
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:battery",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Lithium Battery Protocol",
        key = "battery_protocol",
        register = 106,
        scale = { 0: "BMS Disabled",
                  1: "L01 - Growatt RS485",
                  2: "L02 - Pylontech RS485",
                  4: "L04 - Extented RS485",
                  51: "L51 - Growatt CAN",
                  52: "L52 - Pylontech CAN", },
#        entity_registry_enabled_default = False,
        allowedtypes = PRM | LI,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:protocol",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Input Mode",
        key = "ac_input_mode",
        register = 8,
        scale = { 0: "APL - 90-280 VAC",
                  1: "UPS - 170-280 VAC", 
                  2: "GEN - Generator", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:current-ac",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Output Status",
        key = "ac_output_status",
        register = 0,
        scale = { 0: "Enabled",
                  256: "Disabled",  },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:power",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Output Priority",
        key = "ac_output_priority",
        register = 1,
        scale = { 0: "SBU - Solar/Battery/Utility",
                  1: "SOL - Solar First",
                  2: "UTI - Utility First",
                  3: "SUB - Solar/Utility/Battery", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:priority-high",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Charge Source Priority",
        key = "charge_source_priority",
        register = 2,
        scale = { 0: "Solar First",
                  1: "Solar and Utility",
                  2: "Solar Only",  },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:priority-high",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Output Voltage",
        key = "ac_output_voltage",
        register = 18,
        scale = { 0: "208 VAC",
                  1: "230 VAC",
                  2: "240 VAC",
                  3: "220 VAC", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:flash-triangle-outline",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Output Frequency",
        key = "ac_output_frequency",
        register = 19,
        scale = { 0: "50 Hz",
                  1: "60 Hz", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:sine-wave",
         allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Overload Restart",
        key = "overload_restart",
        register = 20,
        scale = { 0: "Yes",
                  1: "No",
                  2: "Switch to UTI", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:stack-overflow",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Overtemperature Restart",
        key = "overtemperature_restart",
        register = 21,
        scale = { 0: "Yes",
                  1: "No", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:coolant-temperature",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Buzzer Alarm",
        key = "buzzer_alarm",
        register = 22,
        scale = { 0: "Disabled",
                  1: "Enabled", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "System Alarm",
        key = "system_alarm",
        register = 107,
        scale = { 0: "Disabled",
                  1: "Enabled", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:alarm-bell",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Max Battery Charge Current",
        key = "battery_max_charge_current",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 34,
        scale = 1,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Bulk Charge Voltage",
        key = "bulk_charge_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 35,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:flash-triangle",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Float Charge Voltage",
        key = "float_charge_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 36,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:flash-triangle",
        allowedtypes = PRM,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Voltage to Utility",
        key = "battery_volper_utility",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 37,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Percent to Utility",
        key = "battery_volper_utility",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = PERCENTAGE,
        register = 37,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Max AC Charge Current",
        key = "ac_max_charge_current",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 38,
        scale = 1,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery CUTOFF Voltage",
        key = "battery_cutoff_volper",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 82,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery CUTOFF Percent",
        key = "battery_cutoff_volper",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = PERCENTAGE,
        register = 82,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Recovery Voltage",
        key = "battery_recovery_volper",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 95,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | AGM,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Recovery Percent",
        key = "battery_recovery_volper",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = PERCENTAGE,
        register = 95,
        scale = 0.1,
        rounding = 1,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Backlight State",
        key = "backlight_state",
        register = 104,
        scale = { 0: "Backlight OFF",
                        1: "Backlight ON", },
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:lightbulb-outline",
    ),

#####
## INPUT REGISTERS
#####
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery SOC",
        key = "bms_battery_soc",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = PERCENTAGE,
        device_class = SensorDeviceClass.BATTERY,
        register = 614,
        allowedtypes = PRM | LI,
        icon = "mdi:battery-50",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery Voltage",
        key = "bms_battery_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 615,
        scale = 0.01,
        rounding = 2,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery Current",
        key = "bms_battery_current",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 616,
        unit = REGISTER_S16,
        scale = 0.01,
        rounding = 1,
        allowedtypes = PRM | LI,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery Temperature",
        key = "bms_battery_temperature",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfTemperature.CELSIUS,
        device_class = SensorDeviceClass.TEMPERATURE,
        state_class = SensorStateClass.MEASUREMENT,
        register = 617,
        allowedtypes = PRM | LI,
        icon = "mdi:thermometer-low",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Max Charge Current",
        key = "bms_max_charge_current",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 618,
        scale = 0.01,
        rounding = 1,
        allowedtypes = PRM | LI,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery Cycles",
        key = "bms_battery_cycles",
        entity_category = EntityCategory.DIAGNOSTIC,
        register = 699,
        allowedtypes = PRM | LI,
        icon = "mdi:counter",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS Battery SOH",
        key = "bms_battery_soh",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = PERCENTAGE,
        register = 700,
        allowedtypes = PRM | LI,
        icon = "mdi:medication",
    ),

    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL01 Voltage",
        key = "bms_cell01_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 109,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL02 Voltage",
        key = "bms_cell02_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 110,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL03 Voltage",
        key = "bms_cell03_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 111,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL04 Voltage",
        key = "bms_cell04_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 112,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL05 Voltage",
        key = "bms_cell05_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 113,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL06 Voltage",
        key = "bms_cell06_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 114,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL07 Voltage",
        key = "bms_cell07_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 115,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL08 Voltage",
        key = "bms_cell08_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 116,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL09 Voltage",
        key = "bms_cell09_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 117,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL10 Voltage",
        key = "bms_cell10_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 118,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL11 Voltage",
        key = "bms_cell11_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 119,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL12 Voltage",
        key = "bms_cell12_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 120,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL13 Voltage",
        key = "bms_cell13_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 121,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL14 Voltage",
        key = "bms_cell14_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 122,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BMS CELL15 Voltage",
        key = "bms_cell15_voltage",
        entity_category = EntityCategory.DIAGNOSTIC,
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 123,
        register_type = REG_INPUT,
        scale = 0.001,
        rounding = 3,
        allowedtypes = PRM | LI,
        icon = "mdi:flash-triangle-outline",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Warning Status",
        key = "warning_status",
        register = 41,
        scale = { 0: "No Warnings",
                  1: "Fan lock warning (01)",
                  2: "Over charge (03)",
                  4: "Battery voltage low (04)",
                  8: "Over load (07",
                  16: "Op power derating (10)",
                  32: "Solar stop due to bat low (12)",
                  64: "Solar stop due to Pv high (13)",
                  128: "solar stop due to over load (14)",
                  256: "Grid different(15)",
                  512: "Grid phase error(16)",
                  1024: "Op phase loss(17)",
                  2048: "Over temprature(02",
                  4096: "MPPT-Buck current over(18)",
                  8192: "Battery disconnected(19)",
                  16384: "BMS com error(20)",
                  32768: "Pv power insufficient(21)", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        register_type = REG_INPUT,
        icon = "mdi:alert-rhombus",
    ),

    Hf6000sxModbusSensorEntityDescription(
        name = "Error Status",
        key = "error_status",
        register = 40,
        scale = { 0: "No Errors",
                  1: "Cooling Fan Locked",
                  2: "Over Temperature",
                  3: "Batery Voltage High",
                  4: "Batery Voltage Low",
                  5: "Output Short Circuit",
                  6: "Output Voltage High",
                  7: "Inverter Overloaded",
                  8: "Bus voltage high",
                  9: "Bus start fail",
                  11: "Main relay fail",
                  51: "Over Current",
                  52: "Bus voltage low",
                  53: "inverter softstart fai",
                  56: "IGBT Over Current",
                  58: "Output Voltage Low",
                  60: "Negtive Power",
                  61: "MPPT String Voltage High",
                  62: "SCI com error",
                  80: "CAN Communication Fault",
                  81: "Host Loss", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        register_type = REG_INPUT,
        icon = "mdi:water-boiler-alert",
    ),


    Hf6000sxModbusSensorEntityDescription(
        name = "System Status",
        key = "system_status",
        register = 0,
        scale = { 0: "Standby",
                  1: "PV & Grid Discharge",
                  2: "Battery Discharge",
                  3: "FAULT",
                  4: "FLASH",
                  5: "PV Charge",
                  6: "AC Charge",
                  7: "Combined Charge",
                  8: "Combined Charge & Bypass",
                  9: "PV Charge & Bypass",
                  10: "AC Charge & Bypass",
                  11: "Bypass Mode",
                  12: "PV Charge & Discharge", },
#        entity_registry_enabled_default = False,
        entity_category = EntityCategory.DIAGNOSTIC,
        register_type = REG_INPUT,
        icon = "mdi:water-boiler",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Voltage",
        key = "mppt_voltage",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 1,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT 1 Power",
        key = "mppt_power_1",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 3,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:solar-power-variant",
    ),

    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT 2 Power",
        key = "mppt_power_2",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 5,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:solar-power-variant",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT 1 Current",
        key = "mppt_current_1",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 7,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT 2 Current",
        key = "mppt_current_2",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 8,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        entity_category = EntityCategory.DIAGNOSTIC,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Output Power",
        key = "output_power",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 9,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-ac",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Output Apparent",
        key = "output_apparent",
        native_unit_of_measurement = UnitOfApparentPower.VOLT_AMPERE,
        device_class = SensorDeviceClass.APPARENT_POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 11,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-ac",
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Charge Power",
        key = "ac_charge_power",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 13,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:transmission-tower",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Charge Apparent",
        key = "ac_charge_apparent",
        native_unit_of_measurement = UnitOfApparentPower.VOLT_AMPERE,
        device_class = SensorDeviceClass.APPARENT_POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 15,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:transmission-tower",
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Voltage",
        key = "battery_voltage",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 17,
        register_type = REG_INPUT,
        scale = 0.01,
        rounding = 2,
        icon = "mdi:car-battery",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery SOC",
        key = "battery_soc",
        native_unit_of_measurement = PERCENTAGE,
        device_class = SensorDeviceClass.BATTERY,
        register = 18,
        register_type = REG_INPUT,
        allowedtypes = LI,
        icon = "mdi:battery-50",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "BUS Voltage",
        key = "bus_voltage",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 19,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Input Voltage",
        key = "ac_input_voltage",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 20,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:transmission-tower-import",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Input Frequency",
        key = "ac_input_frequency",
        native_unit_of_measurement = UnitOfFrequency.HERTZ,
        state_class = SensorStateClass.MEASUREMENT,
        register = 21,
        register_type = REG_INPUT,
        scale = 0.01,
        rounding = 2,
        icon = "mdi:transmission-tower-import",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Output Voltage",
        key = "output_voltage",
        native_unit_of_measurement = UnitOfElectricPotential.VOLT,
        device_class = SensorDeviceClass.VOLTAGE,
        register = 22,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-ac",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Output Frequency",
        key = "output_frequency",
        native_unit_of_measurement = UnitOfFrequency.HERTZ,
        state_class = SensorStateClass.MEASUREMENT,
        register = 23,
        register_type = REG_INPUT,
        scale = 0.01,
        rounding = 2,
        icon = "mdi:current-ac",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Inverter Temperature",
        key = "inverter_temperature",
        native_unit_of_measurement = UnitOfTemperature.CELSIUS,
        device_class = SensorDeviceClass.TEMPERATURE,
        state_class = SensorStateClass.MEASUREMENT,
        register = 25,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:thermometer-low",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "DC/DC Converter Temperature",
        key = "dc_converter_temperature",
        native_unit_of_measurement = UnitOfTemperature.CELSIUS,
        device_class = SensorDeviceClass.TEMPERATURE,
        state_class = SensorStateClass.MEASUREMENT,
        register = 26,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:thermometer-low",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Inverter Load",
        key = "inverter_load",
        native_unit_of_measurement = PERCENTAGE,
        register = 27,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:percent-box",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Output Current",
        key = "output_current",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 34,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-ac",
    ),
#    Hf6000sxModbusSensorEntityDescription(
#        name = "AC Charge Current",
#        key = "ac_charge_current",
#        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
#        device_class = SensorDeviceClass.CURRENT,
#        register = 35,
#        register_type = REG_INPUT,
#        scale = 0.1,
#        rounding = 1,
#        icon = "mdi:current-dc",
#    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Input Power",
        key = "ac_input_power",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 36,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:transmission-tower",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Input Apparent",
        key = "ac_input_apparent",
        native_unit_of_measurement = UnitOfApparentPower.VOLT_AMPERE,
        device_class = SensorDeviceClass.APPARENT_POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 38,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:transmission-tower",
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Energy Today",
        key = "mppt_energy_today",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:solar-power",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 48,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Energy Total",
        key = "mppt_energy_total",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:solar-power",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 50,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Charge Energy Today",
        key = "ac_charge_energy_today",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:lightning-bolt-circle",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 56,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Charge Energy Total",
        key = "ac_charge_energy_total",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:lightning-bolt-circle",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 58,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Discharge Energy Today",
        key = "battery_discharge_energy_today",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:battery-charging-medium",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 60,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Discharge Energy Total",
        key = "battery_discharge_energy_total",
        native_unit_of_measurement = UnitOfEnergy.KILO_WATT_HOUR,
        icon = "mdi:battery-charging-medium",
        device_class = SensorDeviceClass.ENERGY,
        state_class = SensorStateClass.TOTAL_INCREASING,
        register = 62,
        register_type = REG_INPUT,
        unit = REGISTER_U32,
        scale = 0.1,
        rounding = 1,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "AC Charge Current",
        key = "ac_charge_current",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 68,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Power",
        key = "battery_power",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        register = 77,
        register_type = REG_INPUT,
        unit = REGISTER_S32,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:battery-charging-40",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Fan Speed",
        key = "mppt_fan_speed",
        native_unit_of_measurement = PERCENTAGE,
        register = 81,
        register_type = REG_INPUT,
        icon = "mdi:fan",
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Inverter Fan Speed",
        key = "inverter_fan_speed",
        native_unit_of_measurement = PERCENTAGE,
        register = 82,
        register_type = REG_INPUT,
        icon = "mdi:fan",
        entity_category = EntityCategory.DIAGNOSTIC,
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Charge Current",
        key = "Battery_charge_current",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 83,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-dc",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "Battery Discharge Current",
        key = "Battery_discharge_current",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        register = 84,
        register_type = REG_INPUT,
        scale = 0.1,
        rounding = 1,
        icon = "mdi:current-dc",
    ),

# ============================ CALCULATED MPPT DUE INV BUGS - MPPT SPLIT =================================================

    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Power",
        key = "mppt_power",
        native_unit_of_measurement = UnitOfPower.WATT,
        device_class = SensorDeviceClass.POWER,
        state_class = SensorStateClass.MEASUREMENT,
        value_function= value_function_pv_calculated_power,
        icon = "mdi:solar-power-variant",
    ),
    Hf6000sxModbusSensorEntityDescription(
        name = "MPPT Current",
        key = "mppt_current",
        native_unit_of_measurement = UnitOfElectricCurrent.AMPERE,
        device_class = SensorDeviceClass.CURRENT,
        state_class = SensorStateClass.MEASUREMENT,
        value_function= value_function_pv_calculated_current,
        icon = "mdi:current-dc",
    ),

]

# ============================ plugin declaration =================================================

@dataclass
class hf6000sx_plugin(plugin_base):

    def determineInverterType(self, hub, configdict):
        read_prm = configdict.get(CONF_READ_PRM, DEFAULT_READ_PRM)
        read_scn = configdict.get(CONF_READ_SCN, DEFAULT_READ_SCN)
        read_prt = configdict.get(CONF_READ_PRT, DEFAULT_READ_PRT)
        invertertype = 0
        if read_prm == "PRM": invertertype = invertertype | PRM
        if read_prm == "SCN": invertertype = invertertype | SCN
        if read_scn == "LI": invertertype = invertertype | LI
        if read_scn == "AGM": invertertype = invertertype | AGM
        if read_scn == "RS485": invertertype = invertertype | RS485
        if read_scn == "CANGR": invertertype = invertertype | CANGR

        return invertertype

    def matchInverterWithMask (self, inverterspec, entitymask, serialnumber = 'not relevant', blacklist = None):
        # returns true if the entity needs to be created for an inverter

        prmmatch = ((inverterspec & entitymask & ALL_PRM_GROUP)  != 0) or (entitymask & ALL_PRM_GROUP  == 0)
        scnmatch = ((inverterspec & entitymask & ALL_SCN_GROUP)  != 0) or (entitymask & ALL_SCN_GROUP  == 0)
        prtmatch = ((inverterspec & entitymask & ALL_PRT_GROUP)  != 0) or (entitymask & ALL_PRT_GROUP  == 0)

        return prmmatch and scnmatch and prtmatch


plugin_instance = hf6000sx_plugin(
    plugin_name = 'hf6000sx', 
    SENSOR_TYPES = SENSOR_TYPES,
    NUMBER_TYPES = NUMBER_TYPES,
    BUTTON_TYPES = BUTTON_TYPES,
    SELECT_TYPES = SELECT_TYPES, 
    block_size = 100,
    order16 = Endian.Big,
    order32 = Endian.Big,
    )
